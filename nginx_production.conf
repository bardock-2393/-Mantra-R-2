# Production Nginx Configuration for 2GB+ Video Uploads
# Optimized for 80GB GPU Environment

server {
    listen 443 ssl http2;
    server_name your.domain.com;
    
    # SSL Configuration (replace with your certificates)
    ssl_certificate /path/to/your/fullchain.pem;
    ssl_certificate_key /path/to/your/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # Security Headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # File Upload Configuration - Critical for 2GB+ uploads
    client_max_body_size 10G;          # Allow uploads up to 10GB (safety margin over 2GB limit)
    client_body_timeout 3600s;         # 1 hour timeout for large uploads
    client_header_timeout 60s;         # Headers should arrive quickly
    send_timeout 3600s;                # 1 hour timeout for response sending
    
    # Streaming Upload Optimization - Avoid buffering to disk/memory
    proxy_request_buffering off;       # Critical: Don't buffer request body in nginx
    proxy_buffering off;               # Optional: Don't buffer response either
    proxy_read_timeout 3600s;          # 1 hour timeout for backend response
    proxy_connect_timeout 60s;         # Quick connection to backend
    proxy_send_timeout 3600s;          # 1 hour timeout for sending to backend
    
    # Buffer sizes for large uploads
    client_body_buffer_size 128k;      # Initial buffer size
    proxy_buffer_size 128k;            # Proxy buffer size
    proxy_buffers 4 256k;              # Additional proxy buffers
    proxy_busy_buffers_size 256k;      # Busy buffer size
    
    # Compression (disable for uploads to save CPU)
    gzip off;
    
    # Rate limiting (adjust based on your needs)
    limit_req_zone $binary_remote_addr zone=upload:10m rate=10r/m;
    
    # Upload endpoints - streaming with no buffering
    location /upload/ {
        # Apply rate limiting to uploads
        limit_req zone=upload burst=5 nodelay;
        
        # Proxy to Flask application
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Additional headers for upload tracking
        proxy_set_header X-Upload-Progress $request_id;
        
        # Critical: Ensure no buffering for streaming uploads
        proxy_request_buffering off;
        proxy_buffering off;
        
        # Extended timeouts for large uploads
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;
        proxy_connect_timeout 60s;
    }
    
    # WebSocket endpoints for real-time communication
    location /socket.io/ {
        proxy_pass http://127.0.0.1:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket timeouts
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
    }
    
    # Static files (CSS, JS, images) - with caching
    location /static/ {
        alias /path/to/your/app/static/;
        expires 1d;
        add_header Cache-Control "public, immutable";
        
        # Enable compression for static files
        gzip on;
        gzip_types text/css application/javascript text/javascript application/json;
    }
    
    # Main application routes
    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Standard timeouts for regular requests
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;
        proxy_connect_timeout 60s;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        proxy_pass http://127.0.0.1:8000/health;
        proxy_set_header Host $host;
    }
    
    # Error pages
    error_page 413 @too_large;
    location @too_large {
        return 413 '{"error": "File too large. Maximum size: 2GB"}';
        add_header Content-Type application/json;
    }
    
    # Logging
    access_log /var/log/nginx/ai_video_detective_access.log;
    error_log /var/log/nginx/ai_video_detective_error.log warn;
}

# HTTP redirect to HTTPS
server {
    listen 80;
    server_name your.domain.com;
    return 301 https://$server_name$request_uri;
}

# Upstream definition (if using multiple backend servers)
upstream ai_video_backend {
    # For load balancing across multiple instances
    server 127.0.0.1:8000 weight=1 max_fails=3 fail_timeout=30s;
    # server 127.0.0.1:8001 weight=1 max_fails=3 fail_timeout=30s;
    
    # Enable keepalive connections
    keepalive 32;
}